import string

from django.db import models



class Lead(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', default=False)
    master_record = models.ForeignKey('self', blank=True, null=True)
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    salutation = models.CharField(max_length=40, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    middle_name = models.CharField(max_length=40, blank=True, null=True)
    suffix = models.CharField(max_length=40, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name')
    title = models.CharField(max_length=128, blank=True, null=True)
    company = models.CharField(max_length=255)
    street = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=40, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(max_length=80, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    website = models.URLField(blank=True, null=True)
    photo_url = models.URLField(verbose_name='Photo URL', blank=True, null=True)
    lead_source = models.CharField(max_length=40, choices=[('Advertisement', 'Advertisement'), ('Customer Event', 'Customer Event'), ('Employee Referral', 'Employee Referral'), ('Google AdWords', 'Google AdWords'), ('Other', 'Other'), ('Partner', 'Partner'), ('Purchased List', 'Purchased List'), ('Trade Show', 'Trade Show'), ('Webinar', 'Webinar'), ('Website', 'Website')], blank=True, null=True)
    status = models.CharField(max_length=40, choices=[('Available', 'Available'), ('Banned', 'Banned'), ('Qualified', 'Qualified'), ('In-Progress', 'In-Progress')])
    industry = models.CharField(max_length=40, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Other', 'Other'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities')], blank=True, null=True)
    rating = models.CharField(max_length=40, choices=[('Hot', 'Hot'), ('Warm', 'Warm'), ('Cold', 'Cold')], blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', blank=True, null=True)
    # owner = models.ForeignKey(Group)  # Reference to tables [Group, User]
    is_converted = models.BooleanField(verbose_name='Converted')
    converted_date = models.DateField(blank=True, null=True)
    # converted_account = models.ForeignKey(Account, blank=True, null=True)
    # converted_contact = models.ForeignKey(Contact, blank=True, null=True)
    # converted_opportunity = models.ForeignKey('Opportunity', blank=True, null=True)
    is_unread_by_owner = models.BooleanField(verbose_name='Unread By Owner')
    created_date = models.DateTimeField()
    # created_by = models.ForeignKey('User', related_name='lead_createdby_set')
    last_modified_date = models.DateTimeField()
    last_modified_by = models.ForeignKey('User', related_name='lead_lastmodifiedby_set')
    system_modstamp = models.DateTimeField()
    last_activity_date = models.DateField(verbose_name='Last Activity', blank=True, null=True)
    last_viewed_date = models.DateTimeField(blank=True, null=True)
    last_referenced_date = models.DateTimeField(blank=True, null=True)
    jigsaw = models.CharField(max_length=20, verbose_name='Data.com Key', blank=True, null=True)
    jigsaw_contact_id = models.CharField(max_length=20, verbose_name='Jigsaw Contact ID', blank=True, null=True)
    # connection_received = models.ForeignKey('PartnerNetworkConnection', related_name='lead_connectionreceived_set', blank=True, null=True)
    # connection_sent = models.ForeignKey('PartnerNetworkConnection', related_name='lead_connectionsent_set', blank=True, null=True)
    email_bounced_reason = models.CharField(max_length=255, blank=True, null=True)
    email_bounced_date = models.DateTimeField(blank=True, null=True)
    raspberry_pi = models.ForeignKey('adsrental.RaspberryPi', db_column='Raspberry_Pi__c', blank=True, null=True)
    billed = models.BooleanField()
    registered_ip_address = models.CharField(db_column='Registered_IP_Address__c', max_length=255, verbose_name='Registered IP Address', blank=True, null=True)
    registered_isp = models.CharField(db_column='Registered_ISP__c', max_length=255, verbose_name='Registered ISP', blank=True, null=True)
    login_notifications_disabled = models.BooleanField(db_column='Login_Notifications_Disabled__c', verbose_name='Login Notifications Disabled')
    winprox_uid = models.CharField(db_column='Winprox_UID__c', max_length=255, verbose_name='Winprox UID', blank=True, null=True)
    winprox_ec2_instance = models.ForeignKey('adsrental.Ec2Instance', db_column='Winprox_EC2_Instance__c', blank=True, null=True)
    facebook_profile_url = models.CharField(db_column='Facebook_Profile_Url__c', max_length=255, verbose_name='Facebook Profile Url', blank=True, null=True)
    utm_source = models.CharField(db_column='utm_source__c', max_length=255, verbose_name='utm_source', blank=True, null=True)
    user_agent = models.CharField(max_length=255, verbose_name='UserAgent', blank=True, null=True)
    winprox_download_url = models.CharField(db_column='Winprox_Download_Url__c', max_length=1300, verbose_name='Winprox Download Url', blank=True, null=True)
    activation_ip_address = models.CharField(db_column='Activation_IP_Address__c', max_length=255, verbose_name='Activation IP Address', blank=True, null=True)
    activation_isp = models.CharField(db_column='Activation_ISP__c', max_length=255, verbose_name='Activation ISP', blank=True, null=True)
    activation_seed_1 = models.CharField(db_column='Activation_Seed_1__c', max_length=30, verbose_name='Activation Seed 1')
    activation_key = models.CharField(db_column='Activation_Key__c', max_length=1300, verbose_name='Activation Key', blank=True, null=True)
    browser_extension = models.ForeignKey('adsrental.BrowserExtension', db_column='Browser_Extension__c', blank=True, null=True)
    qualified_lead = models.BooleanField(db_column='Qualified_Lead__c', verbose_name='Qualified Lead')
    browser_extension_installed = models.BooleanField(db_column='Browser_Extension_Installed__c', verbose_name='Browser Extension Installed')
    ad_account_status_last_checked = models.DateField(db_column='Ad_Account_Status_Last_Checked__c', verbose_name='Ad Account Status Last Checked', blank=True, null=True)
    fb_friends = models.DecimalField(db_column='FB_friends__c', max_digits=18, decimal_places=0, verbose_name='FB friends', blank=True, null=True)
    account_name = models.CharField(db_column='Account_Name__c', max_length=30, verbose_name='Account Name')
    activation_url = models.CharField(db_column='Activation_Url__c', max_length=1300, verbose_name='Activation Url', blank=True, null=True)
    banned_reason = models.CharField(db_column='Banned_Reason__c', max_length=255, verbose_name='Banned Reason', choices=[('FAKE', 'FAKE'), ('BAD AD ACCOUNT', 'BAD AD ACCOUNT'), ('SAME COMPUTER', 'SAME COMPUTER'), ('OTHER', 'OTHER'), ('DUPLICATE', 'DUPLICATE')], blank=True, null=True)
    payment_first_name = models.CharField(db_column='Payment_First_Name__c', max_length=255, verbose_name='Payment First Name', blank=True, null=True)
    payment_last_name = models.CharField(db_column='Payment_Last_Name__c', max_length=255, verbose_name='Payment Last Name', blank=True, null=True)
    payment_zipcode = models.CharField(db_column='Payment_Zipcode__c', max_length=40, verbose_name='Payment Zipcode', blank=True, null=True)
    payment_state = models.CharField(db_column='Payment_State__c', max_length=255, verbose_name='Payment State', blank=True, null=True)
    payment_street = models.CharField(db_column='Payment_Street__c', max_length=255, verbose_name='Payment Street', blank=True, null=True)
    payment_city = models.CharField(db_column='Payment_City__c', max_length=255, verbose_name='Payment City', blank=True, null=True)
    winprox_status = models.CharField(db_column='Winprox_Status__c', max_length=255, verbose_name='Winprox Status', blank=True, null=True)
    ad_account_status = models.CharField(db_column='Ad_Account_Status__c', max_length=1300, verbose_name='Ad Account Status', blank=True, null=True)
    credentials_acquired = models.BooleanField(db_column='Credentials_Acquired__c', verbose_name='Credentials Acquired')
    remarks = models.TextField(blank=True, null=True)
    winprox_log_url = models.CharField(db_column='Winprox_Log_Url__c', max_length=1300, verbose_name='Winprox Log Url', blank=True, null=True)
    winprox_last_seen = models.DateTimeField(db_column='Winprox_Last_Seen__c', verbose_name='Winprox Last Seen', blank=True, null=True)
    winprox_tunnel_last_started = models.DateTimeField(db_column='Winprox_Tunnel_Last_Started__c', verbose_name='Winprox Tunnel Last Started', blank=True, null=True)
    raspberry_pi_ec2_instance_hostname = models.CharField(db_column='Raspberry_Pi_EC2_Instance_Hostname__c', max_length=1300, verbose_name='Raspberry Pi EC2 Instance Hostname', blank=True, null=True)
    winprox_online = models.BooleanField(db_column='Winprox_Online__c', verbose_name='Winprox Online')
    touch_count = models.DecimalField(db_column='Touch_Count__c', max_digits=18, decimal_places=0, verbose_name='Touch Count', blank=True, null=True)
    last_touch_date = models.DateTimeField(db_column='Last_Touch_Date__c', verbose_name='Last Touch Date', blank=True, null=True)
    fb_email = models.CharField(db_column='FB_email__c', max_length=1300, verbose_name='FB email', blank=True, null=True)
    fb_secret = models.CharField(db_column='FB_secret__c', max_length=1300, verbose_name='FB secret', blank=True, null=True)
    old_pi_status = models.CharField(db_column='Old_Pi_Status__c', max_length=1300, verbose_name='Old Pi Status', blank=True, null=True)
    google_account = models.BooleanField(db_column='Google_Account__c', verbose_name='Google Account')
    facebook_account = models.BooleanField(db_column='Facebook_Account__c', verbose_name='Facebook Account')
    secret_changed = models.BooleanField(db_column='Secret_Changed__c', verbose_name='Secret Changed')
    facebook_account_status = models.CharField(db_column='Facebook_Account_Status__c', max_length=255, verbose_name='Facebook Account Status', choices=[('Available', 'Available'), ('Banned', 'Banned')], blank=True, null=True)
    google_account_status = models.CharField(db_column='Google_Account_Status__c', max_length=255, verbose_name='Google Account Status', choices=[('Available', 'Available'), ('Banned', 'Banned')], blank=True, null=True)
    dns_anonymization_updated = models.BooleanField(db_column='DNS_Anonymization_Updated__c', verbose_name='DNS Anonymization Updated')
    wrong_password = models.BooleanField(db_column='Wrong_Password__c', verbose_name='Wrong Password')
    bundler_paid = models.BooleanField(db_column='Bundler_Paid__c', verbose_name='Bundler Paid')
    not_banned_status = models.CharField(max_length=20, verbose_name='NotBannedStatus', help_text='When Lead becomes Banned, previous Status is saved here to be restored later once Lead is unbanned.', blank=True, null=True)

    class Meta():
        db_table = 'Lead'
        verbose_name = 'Lead'
        verbose_name_plural = 'Leads'
        # keyPrefix = '00Q'
